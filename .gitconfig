[includeIf "gitdir:~/dev/github/"]
   path = ~/.gitconfig-github
[includeIf "gitdir:~/dev/pro/"]
   path = ~/.gitconfig-pro
[includeIf "gitdir:~/dev/webflo/"]
   path = ~/.gitconfig-github

[core]
   # Speed up commands involving untracked files such as `git status`.
   # https://git-scm.com/docs/git-update-index#_untracked_cache
   untrackedCache = true

[color]
   ui = auto

[color "branch"]
   current = yellow reverse
   local = yellow
   remote = green

[color "diff"]
   meta = yellow bold
   frag = magenta bold # line info
   old = red # deletions
   new = green # additions

[color "status"]
   added = yellow
   changed = green
   untracked = cyan

[commit]
	# https://help.github.com/articles/signing-commits-using-gpg/
	#gpgsign = true

[diff]
	# Detect copies as well as renames
	renames = copies

[merge]
	conflicstyle = diff3
	
[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	pl = log --pretty=oneline -n 20 --graph --abbrev-commit
  	l = !git log --pretty=format:\"%ad%C(red)%d %C(yellow)[%h] %C(green)%cn: %Creset%s \" --decorate --date=short
	s = status -s
	co = !git checkout
 	br = !git branch
  	trash = !git reset --hard HEAD && git clean -fd

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = git pull --recurse-submodules

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	delete-merged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# Remove local branches which do not exist on remote server
	delete-local = "!git branch -vv | grep ": gone]" | awk '{ print $1 }' | xargs -r -n 1 git branch -D"
	
	# Sort local branches by date
	local-branche-by-date = "!git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"

	# Remove local branches which do not exist on remote server
	prune-branches = "!git remote prune origin && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -r git branch -D"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

[core]
   pager = delta

[interactive]
   diffFilter = delta --color-only

[delta]
   features = decorations
   whitespace-error-style = 22 reverse

[delta "decorations"]
   commit-decoration-style = bold yellow box ul
   file-style = bold yellow ul
   file-decoration-style = none
[credential]
	helper = cache --timeout=604800
[init]
	defaultBranch = main
